AWSTemplateFormatVersion: "2010-09-09"
Description: "for OpenSearch Resources"

Parameters:
  ProjectName:
    Description: A project name that is prefixed to resource names
    Type: String
    Default: opensearch-training

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  ResolverCIDRForReverseProxy:
    Description: The resolver parameter varies depending on the configuration of the VPC; the DNS resolver is placed at the base IP of the primary CIDR block plus 2. For example, if you create a VPC with CIDR block 10.0.0.0/24, the DNS resolver will be located at 10.0.0.2.
    Type: String
    Default: 10.192.0.2

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

  CertificateArn:
    Description: Please enter the ARN of the ACM certificate for the ALB
    Type: String
    Default: arn:aws:acm:ap-northeast-1:744743450114:certificate/c38eec0d-82cf-4db6-908a-05df83b41b82

Resources:
  #####################################
  # Network
  #####################################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: ap-northeast-1a
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: ap-northeast-1c
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-subnet-2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: InternetGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-route

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: ap-northeast-1a
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-private-subnet-1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-private-routes

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: ap-northeast-1c
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-private-subnet-2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: LambdaSecurityGroup
      GroupDescription: "Security-Group for Lambda function"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-lambda-security-group

  #####################################
  # ALB
  #####################################
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: InternetGatewayAttachment
    Properties:
      Name: !Sub ${ProjectName}-alb
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ALBSecurityGroup
      GroupDescription: "Security-Group for ALB"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-alb-tgroup
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: 80
      HealthCheckPath: /_dashboards
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      HealthCheckIntervalSeconds: 30
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: "302"
      Targets:
        - Id: !Ref EC2Instance1
        - Id: !Ref EC2Instance2

  #####################################
  # SSM for EC2 in private subnet
  #####################################
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security-Group for VPC Endpoint
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCIDR
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-vpc-endpoint-security-group

  EndpointSSM:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcEndpointType: Interface
      VpcId: !Ref VPC

  EndpointSSMMessages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcEndpointType: Interface
      VpcId: !Ref VPC

  EndpointEC2Messages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcEndpointType: Interface
      VpcId: !Ref VPC

  #####################################
  # EC2
  #####################################
  EC2KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: EC2KeyPair
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ec2-keypair

  EC2IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-SSM-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Ref: EC2IAMRole
      InstanceProfileName: !Sub ${ProjectName}-ec2-instance-profile

  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-072bfb8ae2c884cc4
      InstanceType: t2.micro
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref EC2KeyPair
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref EC2SecurityGroup
          SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            amazon-linux-extras install nginx1
            touch /etc/nginx/conf.d/default.conf
            cat << 'EOF' > /etc/nginx/conf.d/default.conf
            server {
                listen       80;
                listen       [::]:80;
                server_name  $host;
                rewrite ^/$ https://$host/_dashboards redirect;
                resolver ${ResolverCIDR} ipv6=off valid=5s;
                set $domain_endpoint ${OpenSearchServiceDomainEndpoint};
                set $cognito_host ${CognitoDomainLogicalId}.auth.ap-northeast-1.amazoncognito.com;

                location ^~ /_dashboards {
                    # Forward requests to Dashboards
                    proxy_pass https://$domain_endpoint;
                    # Handle redirects to Dashboards
                    proxy_redirect https://$domain_endpoint https://$host;
                    # Handle redirects to Cognito
                    proxy_redirect https://$cognito_host https://$host;
                    # Update cookie domain and path
                    proxy_cookie_domain $domain_endpoint $host;
                    proxy_cookie_path ~*^/$ /_dashboards/;

                    # Response buffer settings
                    proxy_buffer_size 128k;
                    proxy_buffers 4 256k;
                    proxy_busy_buffers_size 256k;
                }

                location ~ \/(log|mfa|sign|fav|forgot|change|saml|oauth2) {
                    # Forward requests to Cognito
                    proxy_pass https://$cognito_host;
                    # Handle redirects to Dashboards
                    proxy_redirect https://$domain_endpoint https://$host;
                    # Handle redirects to Cognito
                    proxy_redirect https://$cognito_host https://$host;

                    # Update cookie domain
                    proxy_cookie_domain $cognito_host $host;
                }
            }
            EOF
            systemctl start nginx.service
          - {
              ResolverCIDR: !Ref ResolverCIDRForReverseProxy,
              OpenSearchServiceDomainEndpoint: !GetAtt OpenSearchServiceDomain.DomainEndpoint,
              CognitoDomainLogicalId: !Ref CognitoUserPoolDomain,
            }
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ec2-instance-1

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-072bfb8ae2c884cc4
      InstanceType: t2.micro
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref EC2KeyPair
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref EC2SecurityGroup
          SubnetId: !Ref PublicSubnet2
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            amazon-linux-extras install nginx1
            touch /etc/nginx/conf.d/default.conf
            cat << 'EOF' > /etc/nginx/conf.d/default.conf
            server {
                listen       80;
                listen       [::]:80;
                server_name  $host;
                rewrite ^/$ https://$host/_dashboards redirect;
                resolver ${ResolverCIDR} ipv6=off valid=5s;
                set $domain_endpoint ${OpenSearchServiceDomainEndpoint};
                set $cognito_host ${CognitoDomainLogicalId}.auth.ap-northeast-1.amazoncognito.com;

                location ^~ /_dashboards {
                    # Forward requests to Dashboards
                    proxy_pass https://$domain_endpoint;
                    # Handle redirects to Dashboards
                    proxy_redirect https://$domain_endpoint https://$host;
                    # Handle redirects to Cognito
                    proxy_redirect https://$cognito_host https://$host;
                    # Update cookie domain and path
                    proxy_cookie_domain $domain_endpoint $host;
                    proxy_cookie_path ~*^/$ /_dashboards/;

                    # Response buffer settings
                    proxy_buffer_size 128k;
                    proxy_buffers 4 256k;
                    proxy_busy_buffers_size 256k;
                }

                location ~ \/(log|mfa|sign|fav|forgot|change|saml|oauth2) {
                    # Forward requests to Cognito
                    proxy_pass https://$cognito_host;
                    # Handle redirects to Dashboards
                    proxy_redirect https://$domain_endpoint https://$host;
                    # Handle redirects to Cognito
                    proxy_redirect https://$cognito_host https://$host;

                    # Update cookie domain
                    proxy_cookie_domain $cognito_host $host;
                }
            }
            EOF
            systemctl start nginx.service
          - {
              ResolverCIDR: !Ref ResolverCIDRForReverseProxy,
              OpenSearchServiceDomainEndpoint: !GetAtt OpenSearchServiceDomain.DomainEndpoint,
              CognitoDomainLogicalId: !Ref CognitoUserPoolDomain,
            }
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ec2-instance-2

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: EC2SecurityGroup
      GroupDescription: "Security-Group for EC2 instance"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ec2-security-group

  #####################################
  # Cognito
  #####################################
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailMessage: "Your username is {username} and temporary password is {####}."
          EmailSubject: "Your temporary password"
          SMSMessage: "Your username is {username} and temporary password is {####}."
      AutoVerifiedAttributes:
        - email
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: false
        DeviceOnlyRememberedOnUserPrompt: false
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA
      MfaConfiguration: "ON"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 1
      Schema:
        - Name: email
          Required: true
          Mutable: true
      UserPoolName: !Sub ${ProjectName}-user-pool
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: true
      UserPoolAddOns:
        AdvancedSecurityMode: AUDIT

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${ProjectName}
      UserPoolId: !Ref CognitoUserPool

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AccessTokenValidity: 60 # 1 hour
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - phone
        - profile
      AuthSessionValidity: 3 # 3 minutes
      CallbackURLs:
        - https://vpc-opensearch-training-v6hkstq4xadg37eyrhrfaw4kui.ap-northeast-1.es.amazonaws.com/_dashboards/app/home
        # - https://opensearch-test.fu-ru.link/_dashboards/app/home/
      ClientName: !Sub ${ProjectName}-user-pool-client
      EnableTokenRevocation: true
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: true
      IdTokenValidity: 60 # 1 hour
      LogoutURLs:
        - https://vpc-opensearch-training-v6hkstq4xadg37eyrhrfaw4kui.ap-northeast-1.es.amazonaws.com/_dashboards/app/home
        # - https://opensearch-test.fu-ru.link/_dashboards/app/home/
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 30 # 30 days
      SupportedIdentityProviders:
        - COGNITO
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days
      UserPoolId: !Ref CognitoUserPool

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowClassicFlow: false
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !Sub cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}
      DeveloperProviderName: !Sub ${ProjectName}-developer-provider
      IdentityPoolName: !Sub ${ProjectName}-identity-pool

  CognitoIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt IAMRoleForCognitoAuthenticated.Arn
        unauthenticated: !GetAtt IAMRoleForCognitoUnauthenticated.Arn
      RoleMappings:
        cognitoProvider:
          Type: Token
          AmbiguousRoleResolution: AuthenticatedRole
          IdentityProvider: !Sub cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}:${CognitoUserPoolClient}

  IAMRoleCognitoAccessForAmazonOpenSearch:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-cognito-access-for-amazon-opensearch-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: es.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonOpenSearchServiceCognitoAccess

  IAMRoleForCognitoUnauthenticated:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-cognito-unauthenticated-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated
      Policies:
        - PolicyName: !Sub ${ProjectName}-cognito-unauthenticated-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: "*"

  IAMRoleForCognitoAuthenticated:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-cognito-authenticated-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: !Sub ${ProjectName}-cognito-authenticated-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"

  #####################################
  # OpenSearch
  #####################################
  OpenSearchServiceDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      ClusterConfig:
        DedicatedMasterEnabled: true
        DedicatedMasterCount: 3
        DedicatedMasterType: "r6g.large.search"
        InstanceCount: 2
        InstanceType: "r6g.large.search"
        WarmEnabled: false
        ZoneAwarenessEnabled: true
        ZoneAwarenessConfig:
          AvailabilityZoneCount: 2
      CognitoOptions:
        Enabled: true
        IdentityPoolId: !Ref CognitoIdentityPool
        RoleArn: !GetAtt IAMRoleCognitoAccessForAmazonOpenSearch.Arn
        UserPoolId: !Ref CognitoUserPool
      DomainName: !Sub ${ProjectName}
      DomainEndpointOptions:
        CustomEndpointEnabled: false
        EnforceHTTPS: true
        TLSSecurityPolicy: "Policy-Min-TLS-1-2-2019-07"
      EngineVersion: "OpenSearch_2.3"
      EBSOptions:
        EBSEnabled: true
        Iops: 3000 # minimum
        Throughput: 125 # minimum
        VolumeSize: 10 # minimum
        VolumeType: "gp3"
      EncryptionAtRestOptions:
        Enabled: true
        KmsKeyId: "alias/aws/es"
      LogPublishingOptions:
        ES_APPLICATION_LOGS:
          Enabled: true
          CloudWatchLogsLogGroupArn: !GetAtt LogGroupForApplicationLogs.Arn
        SEARCH_SLOW_LOGS:
          Enabled: true
          CloudWatchLogsLogGroupArn: !GetAtt LogGroupForSearchLogs.Arn
        INDEX_SLOW_LOGS:
          Enabled: true
          CloudWatchLogsLogGroupArn: !GetAtt LogGroupForIndexLogs.Arn
        AUDIT_LOGS:
          Enabled: true
          CloudWatchLogsLogGroupArn: !GetAtt LogGroupForAuditLogs.Arn
      NodeToNodeEncryptionOptions:
        Enabled: true
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: "true"
        indices.fielddata.cache.size: "20"
        indices.query.bool.max_clause_count: "1024"
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: false
        MasterUserOptions:
          MasterUserARN: !GetAtt IAMRoleForCognitoAuthenticated.Arn
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: "arn:aws:iam::744743450114:role/opensearch-training-dev-ap-northeast-1-lambdaRole"
            Action: "es:ES*"
            Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ProjectName}/*"
          - Effect: "Allow"
            Principal:
              AWS: !GetAtt IAMRoleForCognitoAuthenticated.Arn
            Action: "es:ESHttp*"
            Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ProjectName}/*"
      VPCOptions:
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref OSSecurityGroup

  OSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: OpenSearchSecurityGroup
      GroupDescription: "Security-Group for OpenSearch"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref LambdaSecurityGroup
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - SourceSecurityGroupId: !Ref EC2SecurityGroup
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-opensearch-security-group

  LogGroupForSearchLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/OpenSearchService/domains/${ProjectName}/search-logs
      RetentionInDays: 30

  LogGroupForApplicationLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/OpenSearchService/domains/${ProjectName}/application-logs
      RetentionInDays: 30

  LogGroupForIndexLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/OpenSearchService/domains/${ProjectName}/index-logs
      RetentionInDays: 30

  LogGroupForAuditLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/OpenSearchService/domains/${ProjectName}/audit-logs
      RetentionInDays: 30

  OpenSearchLogPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: !Sub ${ProjectName}-opensearch-log-policy
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "${ProjectName}-opensearch-log-policy",
              "Effect": "Allow",
              "Principal": {
                "Service": "es.amazonaws.com"
              },
              "Action": [
                "logs:PutLogEvents",
                "logs:CreateLogStream"
              ],
              "Resource": [
                "${LogGroupForSearchLogs.Arn}",
                "${LogGroupForApplicationLogs.Arn}",
                "${LogGroupForIndexLogs.Arn}",
                "${LogGroupForAuditLogs.Arn}"
              ],
              "Condition": {
                "StringEquals": {
                    "aws:SourceAccount": "${AWS::AccountId}"
                },
                "ArnLike": {
                    "aws:SourceArn": "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ProjectName}"
                }
              }
            }
          ]
        }
